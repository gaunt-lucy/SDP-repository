[0m[[0minfo[0m] [0m[32mPublicScalaBasicsSuite:[0m[0m
[0m[[0minfo[0m] [0m[32m- [1] The add function should return the addition of a and b[0m[0m
[0m[[0minfo[0m] [0m[32m- [2] The inRange function should return an inclusive range[0m[0m
[0m[[0minfo[0m] [0m[32m- [4] The oddRange function should return a range of all odd integers from 1 to n[0m[0m
[0m[[0minfo[0m] [0m[31m- [5] The minWhile function should return the minimum integer in an array using a while loop *** FAILED ***[0m[0m
[0m[[0minfo[0m] [0m[31m  support.TreeTraversals.hasWhileLoop(method) was false Your implementation did not include a while loop (PublicScalaBasicsSuite.scala:40)[0m[0m
[0m[[0minfo[0m] [0m[31m- [5] The minFor function should return the minimum integer in an array using a for loop *** FAILED ***[0m[0m
[0m[[0minfo[0m] [0m[31m  support.TreeTraversals.hasForEach(method) was false Your implementation did not include a for loop (PublicScalaBasicsSuite.scala:53)[0m[0m
[0m[[0minfo[0m] [0m[31m- [5] The minRecursive function should return the minimum integer in an array using recursion *** FAILED ***[0m[0m
[0m[[0minfo[0m] [0m[31m  support.TreeTraversals.hasIfs(method) was false Your implementation requires an if expression (PublicScalaBasicsSuite.scala:69)[0m[0m
[0m[[0minfo[0m] [0m[31m- [3] The base36 function should return the base 36 equivalent of the given BigInt *** FAILED ***[0m[0m
[0m[[0minfo[0m] [0m[31m  scala.NotImplementedError: an implementation is missing[0m[0m
[0m[[0minfo[0m] [0m[31m  at scala.Predef$.$qmark$qmark$qmark(Predef.scala:284)[0m[0m
[0m[[0minfo[0m] [0m[31m  at basics.ScalaBasics$.base36(ScalaBasics.scala:93)[0m[0m
[0m[[0minfo[0m] [0m[31m  at basics.PublicScalaBasicsSuite.$anonfun$new$13(PublicScalaBasicsSuite.scala:79)[0m[0m
[0m[[0minfo[0m] [0m[31m  at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)[0m[0m
[0m[[0minfo[0m] [0m[31m  at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)[0m[0m
[0m[[0minfo[0m] [0m[31m  at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m[0m
[0m[[0minfo[0m] [0m[31m  at org.scalatest.Transformer.apply(Transformer.scala:22)[0m[0m
[0m[[0minfo[0m] [0m[31m  at org.scalatest.Transformer.apply(Transformer.scala:20)[0m[0m
[0m[[0minfo[0m] [0m[31m  at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:186)[0m[0m
[0m[[0minfo[0m] [0m[31m  at org.scalatest.TestSuite.withFixture(TestSuite.scala:196)[0m[0m
[0m[[0minfo[0m] [0m[31m  ...[0m[0m
[0m[[0minfo[0m] [0m[31m- [5] The splitInHalf function should split a string in half *** FAILED ***[0m[0m
[0m[[0minfo[0m] [0m[31m  scala.NotImplementedError: an implementation is missing[0m[0m
[0m[[0minfo[0m] [0m[31m  at scala.Predef$.$qmark$qmark$qmark(Predef.scala:284)[0m[0m
[0m[[0minfo[0m] [0m[31m  at basics.ScalaBasics$.splitInHalf(ScalaBasics.scala:116)[0m[0m
[0m[[0minfo[0m] [0m[31m  at basics.PublicScalaBasicsSuite.check$1(PublicScalaBasicsSuite.scala:86)[0m[0m
[0m[[0minfo[0m] [0m[31m  at basics.PublicScalaBasicsSuite.$anonfun$new$14(PublicScalaBasicsSuite.scala:90)[0m[0m
[0m[[0minfo[0m] [0m[31m  at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)[0m[0m
[0m[[0minfo[0m] [0m[31m  at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)[0m[0m
[0m[[0minfo[0m] [0m[31m  at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m[0m
[0m[[0minfo[0m] [0m[31m  at org.scalatest.Transformer.apply(Transformer.scala:22)[0m[0m
[0m[[0minfo[0m] [0m[31m  at org.scalatest.Transformer.apply(Transformer.scala:20)[0m[0m
[0m[[0minfo[0m] [0m[31m  at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:186)[0m[0m
[0m[[0minfo[0m] [0m[31m  ...[0m[0m
[0m[[0minfo[0m] [0m[31m- [6] isPalindrome should return true if a string is a palindrome *** FAILED ***[0m[0m
[0m[[0minfo[0m] [0m[31m  support.TreeTraversals.hasForComp(method) was false Your implementation must use a for comprehension (PublicScalaBasicsSuite.scala:98)[0m[0m
